@page "/index"
@using ICSharpCode.SharpZipLib.Zip;
@using Microsoft.JSInterop
@using System.Text;
@using RegistrationModule.Models;
@using RegistrationModule.Repositories;
@using System.Text.Json;
@inject IJSRuntime JSRuntime
@inject Other.Condition Condition 

<link href="index.css" rel="stylesheet" />


<div class="text-center">
    <textarea @bind="myText" rows="5" cols="50"></textarea>
    <br />
    <button @onclick="DownloadText" class="btn-download">Скачать</button>
</div>

@if (isFileDownloaded)
{
    <p class="success-message text-center">Файл успешно скачан!</p>
}

<h3>ShowTextFile</h3>
<div class="col-4">
    <InputFile OnChange="HandleFileChange"></InputFile>
</div>

@if (isInitialized)
{
    @if (user.Role == Other.Role.Admin)
    {
        <pre class="text-center">
            <textarea @bind="fileContent" rows="5" cols="50"></textarea>
            <button @onclick="SaveFile" class="btn-download">Сохранить</button>
        </pre>
    }
    @if (user.Role == Other.Role.User)
    {
        <pre class="text-center">
            <textarea @bind="fileContent" rows="5" cols="50"></textarea>
        </pre>
    }
}
@if (isFileSaved)
{
    <p class="success-message text-center">Файл успешно сохранен!</p>
}

@code {
    private string myText;
    private bool isFileDownloaded;
    private bool isFileSaved;
    private bool isInitialized;
    private string fileContent = "";
    private string _fileName;
    private User user;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        Condition.IsOpened = false;
        bool isZipFile = Path.GetExtension(file.Name).Equals(".zip", StringComparison.OrdinalIgnoreCase);
        if (isZipFile)
        {
            var downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
            var zipFilePath = Path.Combine(downloadsFolder, file.Name);
            var filePassword = await FileRepository.GetFilePassword(Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(file.Name)));
            using (var zipFile = new ZipFile(zipFilePath))
            {
                zipFile.Password = filePassword;
                string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);
                var entry = zipFile.GetEntry(fileNameWithoutExtension);
                if (entry != null)
                {
                    // Извлекаем файл из архива
                    using (var stream = zipFile.GetInputStream(entry))
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                        Condition.IsOpened = true;
                    }
                }
                else
                {
                    fileContent = "Файл не найден в архиве.";
                }
            }
        }
        else
        {
            var lastModified = file.LastModified.DateTime.ToString("dd-MM-yyyy HH:mm");
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            _fileName = file.Name;
            var fileBeenModified = await FileRepository.FileBeenModified(lastModified);
            if (fileBeenModified)
            {
                fileContent = "Файл был изменен вне системы. Просмотр содержимого недоступен!";
            }
            else
            {
                fileContent = Encoding.UTF8.GetString(buffer);
            }
        }
    }

    private async Task SaveFile()
    {
        //var buffer = Encoding.UTF8.GetBytes(fileContent);
        //var downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
        //var filePath = Path.Combine(downloadsFolder, _fileName);
        //string currentExtension = System.IO.Path.GetExtension(filePath); 
        //if (currentExtension == ".txt") 
        //{
        //    filePath = Path.ChangeExtension(filePath, ".secretextension");
        //}
        //await FileRepository.AddFileInfoToDB(filePath, _fileName);
        //await System.IO.File.WriteAllBytesAsync(filePath, buffer);
        //isFileSaved = true;
        var buffer = Encoding.UTF8.GetBytes(fileContent);
        var downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
        var zipFilePath = Path.Combine(downloadsFolder, _fileName + ".zip");

        // Создаем новый zip-архив
        using (var zipFile = new Ionic.Zip.ZipFile())
        {
            // Устанавливаем пароль для zip-архива

            await FileRepository.UpdateFileInfo(Path.GetFileNameWithoutExtension(_fileName), user.Login);
            var file = await FileRepository.GetFileAsync(Path.GetFileNameWithoutExtension(_fileName));
            zipFile.Password = $"{file.Password}";
            // Добавляем файл внутри архива
            zipFile.AddEntry(_fileName, buffer);

            // Сохраняем zip-архив на диск
            zipFile.Save(zipFilePath);
        }

        isFileSaved = true;
    }

    private async Task DownloadTextAsFile()
    {
        try
        {   
            string text = myText;

            string fileName = await JSRuntime.InvokeAsync<string>("prompt", "Введите имя файла");

            if (!string.IsNullOrEmpty(fileName))
            {
                string filePath = fileName + ".txt";
                string currentExtension = System.IO.Path.GetExtension(filePath);
                if (currentExtension == ".txt")
                {
                    filePath = Path.ChangeExtension(filePath, ".secretextension");
                }
                await FileRepository.AddFileInfoToDB(filePath, fileName);
                await JSRuntime.InvokeVoidAsync("saveTextAsFile", filePath, text);

                isFileDownloaded = true;
                myText = string.Empty;
            }
        }
        catch(Exception ex){}
    }

    private async Task DownloadText()
    {
        await DownloadTextAsFile();
    }

    protected override async Task OnInitializedAsync()
    {
        string userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            user = JsonSerializer.Deserialize<User>(userJson);
        }
        isInitialized = true;
    }
}
