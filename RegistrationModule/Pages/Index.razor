@page "/index"
@using Microsoft.JSInterop
@using System.Text;
@using RegistrationModule.Models;
@using RegistrationModule.Repositories;
@using System.Text.Json;
@inject IJSRuntime JSRuntime

<link href="index.css" rel="stylesheet" />


<div class="text-center">
    <textarea @bind="myText" rows="5" cols="50"></textarea>
    <br />
    <button @onclick="DownloadText" class="btn-download">Скачать</button>
</div>

@if (isFileDownloaded)
{
    <p class="success-message text-center">Файл успешно скачан!</p>
}

<h3>ShowTextFile</h3>
<div class="col-4">
    <InputFile OnChange="HandleFileChange"></InputFile>
</div>

@if (isInitialized)
{
    @if (user.Role == Other.Role.Admin)
    {
        <pre class="text-center">
            <textarea @bind="fileContent" rows="5" cols="50"></textarea>
            <button @onclick="SaveFile" class="btn-download">Сохранить</button>
        </pre>
    }
    @if (user.Role == Other.Role.User)
    {
        <pre class="text-center">
            <textarea @bind="fileContent" rows="5" cols="50"></textarea>
        </pre>
    }
}
@if (isFileSaved)
{
    <p class="success-message text-center">Файл успешно сохранен!</p>
}

@code {
    private string myText;
    private bool isFileDownloaded;
    private bool isFileSaved;
    private bool isInitialized;
    private string fileContent = "";
    private string _fileName;
    private User user;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        fileContent = Encoding.UTF8.GetString(buffer);
        _fileName = file.Name;
    }

    private async Task SaveFile()
    {
        var buffer = Encoding.UTF8.GetBytes(fileContent);
        var downloadsFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
        var filePath = Path.Combine(downloadsFolder, _fileName);
        string currentExtension = System.IO.Path.GetExtension(filePath); 
        if (currentExtension == ".txt") 
        {
            filePath = Path.ChangeExtension(filePath, ".secretextension");
        }
        await File.WriteAllBytesAsync(filePath, buffer);
        isFileSaved = true;
    }

    private async Task DownloadTextAsFile()
    {
        try
        {
            string text = myText;

            string fileName = await JSRuntime.InvokeAsync<string>("prompt", "Введите имя файла");

            if (!string.IsNullOrEmpty(fileName))
            {
                string filePath = fileName + ".txt";

                await JSRuntime.InvokeVoidAsync("saveTextAsFile", filePath, text);

                isFileDownloaded = true;
                myText = string.Empty;
            }
        }
        catch(Exception ex){}
    }

    private async Task DownloadText()
    {
        await DownloadTextAsFile();
    }

    protected override async Task OnInitializedAsync()
    {
        string userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            user = JsonSerializer.Deserialize<User>(userJson);
        }
        isInitialized = true;
    }
}
